name: Publish React-UI Pre-release to npm

on:
  push:
    branches:
      - "release/v*"

jobs:
  publish-pre-release:
    runs-on: ubuntu-latest
    concurrency:
      group: "publish-pre-release"
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch main branch
        run: git fetch origin main:main
        shell: bash

      - name: Check for merge commits
        id: check
        run: |
          echo "Checking for merge commits since branching from main..."
          # Find the commit where the current branch diverged from main
          DIVERGE_POINT=$(git merge-base main HEAD)
          # Get the merge commits since that point, excluding certain patterns (Merge branch, Merge pull request)
          MERGE_COMMITS=$(git log --merges $DIVERGE_POINT..HEAD --pretty=format:"%h %s" | grep -v -E 'Merge branch .* into .*|Merge pull request .* from .*')
          echo "Merge commits:"
          echo "$MERGE_COMMITS"
          # Write the merge commits to commit_messages.txt in bullet point format
          COMMIT_MESSAGES=$(git log --merges $DIVERGE_POINT..HEAD --pretty=format:"* %h %s" | grep -v -E 'Merge branch .* into .*|Merge pull request .* from .*')
          echo "$COMMIT_MESSAGES" > commit_messages.txt
          # Count the merge commits, excluding empty lines
          MERGE_COMMIT_COUNT=$(echo "$MERGE_COMMITS" | grep -v '^$' | wc -l)
          if [ "$MERGE_COMMIT_COUNT" -eq "0" ]; then
            echo "No new merge commits found. Cancelling workflow."
            echo "::set-output name=cancel::true"
          else
            echo "::set-output name=cancel::false"
            echo "::set-output name=merge_commits::$MERGE_COMMITS"
          fi
        shell: bash

      - name: Cancel workflow if no merge commits
        uses: andymckay/cancel-action@0.2
        if: steps.check.outputs.cancel == 'true'

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org/"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install

      - name: Run Tests
        run: |
          pnpm test
          pnpm test:docker

      - name: Bump Version
        run: |
          pnpm version prerelease --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        env:
          CI: true

      - name: Configure npm for Scoped Packages
        run: |
          echo "@ipguk:registry=https://registry.npmjs.org/" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc

      - name: Publish to npm
        run: pnpm publish --access=public --tag=next --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate Release Notes from Merge Commit Messages
        run: |
          echo "Generating release notes based on merge commits..."
          echo "${{ steps.check.outputs.merge_commits }}" > merge_commits.txt

      - name: Commit Version Changes
        run: |
          git add package.json
          git commit -m "Bump version to ${{ env.VERSION }}"
          # Create the Git tag with the version from package.json
          git tag -a "v${{ env.VERSION }}" -m "Version ${{ env.VERSION }}"

      - name: Fetch latest changes and tags
        run: git fetch

      - name: Push Changes and Tags
        run: |
          git push
          git push --tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "${{ env.VERSION }}"
          body_path: commit_messages.txt
          draft: false
          prerelease: true
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Post Release Message to Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -d '{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "0078D7",
            "title": "New Pre-release Published",
            "text": "A new pre-release version ${{ env.VERSION }} has been published to npm. [View Release](https://github.com/IPG-Automotive-UK/react-ui/releases/tag/v${{ env.VERSION }})"
          }' $TEAMS_WEBHOOK_URL
